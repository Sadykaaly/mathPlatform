import random

from django import forms
from django.apps import apps
from django.utils.translation import ugettext_lazy as _

from generator.generator import Generator
from question_bank.models import QuestionBankContent, QuestionBank
from quiz.models import MCQuestion, Answer, TFQuestion
from themes.models import Theme


class QuestionGeneratorForm(forms.Form):
    GENERATOR_TYPE_WITH_BLANK = [('', '---------')] + list(Generator.GENERATOR_TYPE)

    SUB_THEME_CHOICE_LIST = [
        ('', '-----------')
    ]

    type = forms.ChoiceField(choices=QuestionBankContent.QUESTION_TYPE, label=_('Question type'), required=True)
    theme = forms.ChoiceField(choices=[], label=_('Theme'), required=True)
    content = forms.CharField(label=_('Question'), help_text=_("Enter the question text that you want displayed"),
                              widget=forms.Textarea)
    generator = forms.ChoiceField(choices=GENERATOR_TYPE_WITH_BLANK, label=_('Generator'), required=True)
    generator_sub = forms.ChoiceField(choices=SUB_THEME_CHOICE_LIST, label=_('Sub Generator'), required=False)
    quantity = forms.IntegerField(label=_('Number of questions'),
                                  help_text=_('Number of questions generated by algorithm'), min_value=0)
    min_number = forms.IntegerField(label=_('Min value'), help_text=_('Minimum number of number rage'), min_value=0,
                                    required=False)
    max_number = forms.IntegerField(label=_('Max value'), help_text=_('Maximum number of number rage'), min_value=0,
                                    required=False)

    def __init__(self, *args, **kwargs):
        self.question_bank = self.get_question_bank(kwargs.pop('question_bank', None))
        super(QuestionGeneratorForm, self).__init__(*args, **kwargs)
        self.fields['theme'].choices = [(x.pk, x.title) for x in Theme.objects.all()]

    def get_question_bank(self, pk):
        try:
            return QuestionBank.objects.get(pk=pk)
        except QuestionBank.DoesNotExist:
            return None
        except QuestionBank.MultipleObjectsReturned:
            return None

    def get_theme(self, pk):
        try:
            return Theme.objects.get(pk=pk)
        except Theme.DoesNotExist:
            return None
        except Theme.MultipleObjectsReturned:
            return None

    def save(self):
        self.generate_questions()
        return None

    def generate_questions(self):
        question_model = self.get_model(self.cleaned_data.get('type'))
        for q in range(self.cleaned_data.get("quantity")):
            generator = Generator.get_generator(self.cleaned_data.get('generator'))
            question_and_solution = generator().question_and_solution()
            question = question_model.objects.create(
                theme=self.get_theme(self.cleaned_data.get('theme')),
                content=self.cleaned_data.get('content').format(question=question_and_solution['question']),
            )

            if question_model.__name__ == MCQuestion.__name__:
                Answer.objects.create(question=question, content=question_and_solution['answer'], correct=True)
                for i in range(2):
                    Answer.objects.create(question=question, content=random.choice(range(100, -100, -1)))

            elif question_model.__name__ == TFQuestion.__name__:
                question.correct = True

            QuestionBankContent.objects.create(question_bank=self.question_bank, item=question)
            self.question_bank.questions.add(question)

    def get_model(self, model_name):
        if model_name in QuestionBankContent.QUESTION_TYPE_LIST:
            return apps.get_model(app_label='quiz',
                                  model_name=model_name)
        return None
